# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  firstName: String
  lastName: String
  name: String
  email: String
  password: PasswordState
  isAdmin: Boolean
  createdAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  firstName: StringFilter
  lastName: StringFilter
  email: StringFilter
  isAdmin: BooleanFilter
  createdAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  firstName: OrderDirection
  lastName: OrderDirection
  email: OrderDirection
  isAdmin: OrderDirection
  createdAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  firstName: String
  lastName: String
  email: String
  password: String
  isAdmin: Boolean
  createdAt: DateTime
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  firstName: String
  lastName: String
  email: String
  password: String
  isAdmin: Boolean
  createdAt: DateTime
}

type Country {
  id: ID!
  name: String
  code: String
  isdCode: String
  states(where: StateWhereInput! = {}, orderBy: [StateOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: StateWhereUniqueInput): [State!]
  statesCount(where: StateWhereInput! = {}): Int
  phones(where: PhoneWhereInput! = {}, orderBy: [PhoneOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PhoneWhereUniqueInput): [Phone!]
  phonesCount(where: PhoneWhereInput! = {}): Int
}

input CountryWhereUniqueInput {
  id: ID
  code: String
}

input CountryWhereInput {
  AND: [CountryWhereInput!]
  OR: [CountryWhereInput!]
  NOT: [CountryWhereInput!]
  id: IDFilter
  name: StringFilter
  code: StringFilter
  isdCode: StringFilter
  states: StateManyRelationFilter
  phones: PhoneManyRelationFilter
}

input StateManyRelationFilter {
  every: StateWhereInput
  some: StateWhereInput
  none: StateWhereInput
}

input PhoneManyRelationFilter {
  every: PhoneWhereInput
  some: PhoneWhereInput
  none: PhoneWhereInput
}

input CountryOrderByInput {
  id: OrderDirection
  name: OrderDirection
  code: OrderDirection
  isdCode: OrderDirection
}

input CountryUpdateInput {
  name: String
  code: String
  isdCode: String
  states: StateRelateToManyForUpdateInput
  phones: PhoneRelateToManyForUpdateInput
}

input StateRelateToManyForUpdateInput {
  disconnect: [StateWhereUniqueInput!]
  set: [StateWhereUniqueInput!]
  create: [StateCreateInput!]
  connect: [StateWhereUniqueInput!]
}

input PhoneRelateToManyForUpdateInput {
  disconnect: [PhoneWhereUniqueInput!]
  set: [PhoneWhereUniqueInput!]
  create: [PhoneCreateInput!]
  connect: [PhoneWhereUniqueInput!]
}

input CountryUpdateArgs {
  where: CountryWhereUniqueInput!
  data: CountryUpdateInput!
}

input CountryCreateInput {
  name: String
  code: String
  isdCode: String
  states: StateRelateToManyForCreateInput
  phones: PhoneRelateToManyForCreateInput
}

input StateRelateToManyForCreateInput {
  create: [StateCreateInput!]
  connect: [StateWhereUniqueInput!]
}

input PhoneRelateToManyForCreateInput {
  create: [PhoneCreateInput!]
  connect: [PhoneWhereUniqueInput!]
}

type State {
  id: ID!
  name: String
  code: String
  country: Country
  cities(where: CityWhereInput! = {}, orderBy: [CityOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CityWhereUniqueInput): [City!]
  citiesCount(where: CityWhereInput! = {}): Int
}

input StateWhereUniqueInput {
  id: ID
  code: String
}

input StateWhereInput {
  AND: [StateWhereInput!]
  OR: [StateWhereInput!]
  NOT: [StateWhereInput!]
  id: IDFilter
  name: StringFilter
  code: StringFilter
  country: CountryWhereInput
  cities: CityManyRelationFilter
}

input CityManyRelationFilter {
  every: CityWhereInput
  some: CityWhereInput
  none: CityWhereInput
}

input StateOrderByInput {
  id: OrderDirection
  name: OrderDirection
  code: OrderDirection
}

input StateUpdateInput {
  name: String
  code: String
  country: CountryRelateToOneForUpdateInput
  cities: CityRelateToManyForUpdateInput
}

input CountryRelateToOneForUpdateInput {
  create: CountryCreateInput
  connect: CountryWhereUniqueInput
  disconnect: Boolean
}

input CityRelateToManyForUpdateInput {
  disconnect: [CityWhereUniqueInput!]
  set: [CityWhereUniqueInput!]
  create: [CityCreateInput!]
  connect: [CityWhereUniqueInput!]
}

input StateUpdateArgs {
  where: StateWhereUniqueInput!
  data: StateUpdateInput!
}

input StateCreateInput {
  name: String
  code: String
  country: CountryRelateToOneForCreateInput
  cities: CityRelateToManyForCreateInput
}

input CountryRelateToOneForCreateInput {
  create: CountryCreateInput
  connect: CountryWhereUniqueInput
}

input CityRelateToManyForCreateInput {
  create: [CityCreateInput!]
  connect: [CityWhereUniqueInput!]
}

type City {
  id: ID!
  name: String
  state: State
  areas(where: PostalCodeWhereInput! = {}, orderBy: [PostalCodeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostalCodeWhereUniqueInput): [PostalCode!]
  areasCount(where: PostalCodeWhereInput! = {}): Int
}

input CityWhereUniqueInput {
  id: ID
}

input CityWhereInput {
  AND: [CityWhereInput!]
  OR: [CityWhereInput!]
  NOT: [CityWhereInput!]
  id: IDFilter
  name: StringFilter
  state: StateWhereInput
  areas: PostalCodeManyRelationFilter
}

input PostalCodeManyRelationFilter {
  every: PostalCodeWhereInput
  some: PostalCodeWhereInput
  none: PostalCodeWhereInput
}

input CityOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input CityUpdateInput {
  name: String
  state: StateRelateToOneForUpdateInput
  areas: PostalCodeRelateToManyForUpdateInput
}

input StateRelateToOneForUpdateInput {
  create: StateCreateInput
  connect: StateWhereUniqueInput
  disconnect: Boolean
}

input PostalCodeRelateToManyForUpdateInput {
  disconnect: [PostalCodeWhereUniqueInput!]
  set: [PostalCodeWhereUniqueInput!]
  create: [PostalCodeCreateInput!]
  connect: [PostalCodeWhereUniqueInput!]
}

input CityUpdateArgs {
  where: CityWhereUniqueInput!
  data: CityUpdateInput!
}

input CityCreateInput {
  name: String
  state: StateRelateToOneForCreateInput
  areas: PostalCodeRelateToManyForCreateInput
}

input StateRelateToOneForCreateInput {
  create: StateCreateInput
  connect: StateWhereUniqueInput
}

input PostalCodeRelateToManyForCreateInput {
  create: [PostalCodeCreateInput!]
  connect: [PostalCodeWhereUniqueInput!]
}

type PostalCode {
  id: ID!
  name: String
  area: String
  code: String
  city: City
}

input PostalCodeWhereUniqueInput {
  id: ID
  code: String
}

input PostalCodeWhereInput {
  AND: [PostalCodeWhereInput!]
  OR: [PostalCodeWhereInput!]
  NOT: [PostalCodeWhereInput!]
  id: IDFilter
  area: StringFilter
  code: StringFilter
  city: CityWhereInput
}

input PostalCodeOrderByInput {
  id: OrderDirection
  area: OrderDirection
  code: OrderDirection
}

input PostalCodeUpdateInput {
  area: String
  code: String
  city: CityRelateToOneForUpdateInput
}

input CityRelateToOneForUpdateInput {
  create: CityCreateInput
  connect: CityWhereUniqueInput
  disconnect: Boolean
}

input PostalCodeUpdateArgs {
  where: PostalCodeWhereUniqueInput!
  data: PostalCodeUpdateInput!
}

input PostalCodeCreateInput {
  area: String
  code: String
  city: CityRelateToOneForCreateInput
}

input CityRelateToOneForCreateInput {
  create: CityCreateInput
  connect: CityWhereUniqueInput
}

type Address {
  id: ID!
  house: String
  street: String
  landmark: String
  postalCode: PostalCode
  person: Person
  organization: Organization
}

input AddressWhereUniqueInput {
  id: ID
}

input AddressWhereInput {
  AND: [AddressWhereInput!]
  OR: [AddressWhereInput!]
  NOT: [AddressWhereInput!]
  id: IDFilter
  house: StringFilter
  street: StringFilter
  landmark: StringFilter
  postalCode: PostalCodeWhereInput
  person: PersonWhereInput
  organization: OrganizationWhereInput
}

input AddressOrderByInput {
  id: OrderDirection
  house: OrderDirection
  street: OrderDirection
  landmark: OrderDirection
}

input AddressUpdateInput {
  house: String
  street: String
  landmark: String
  postalCode: PostalCodeRelateToOneForUpdateInput
  person: PersonRelateToOneForUpdateInput
  organization: OrganizationRelateToOneForUpdateInput
}

input PostalCodeRelateToOneForUpdateInput {
  create: PostalCodeCreateInput
  connect: PostalCodeWhereUniqueInput
  disconnect: Boolean
}

input PersonRelateToOneForUpdateInput {
  create: PersonCreateInput
  connect: PersonWhereUniqueInput
  disconnect: Boolean
}

input OrganizationRelateToOneForUpdateInput {
  create: OrganizationCreateInput
  connect: OrganizationWhereUniqueInput
  disconnect: Boolean
}

input AddressUpdateArgs {
  where: AddressWhereUniqueInput!
  data: AddressUpdateInput!
}

input AddressCreateInput {
  house: String
  street: String
  landmark: String
  postalCode: PostalCodeRelateToOneForCreateInput
  person: PersonRelateToOneForCreateInput
  organization: OrganizationRelateToOneForCreateInput
}

input PostalCodeRelateToOneForCreateInput {
  create: PostalCodeCreateInput
  connect: PostalCodeWhereUniqueInput
}

input PersonRelateToOneForCreateInput {
  create: PersonCreateInput
  connect: PersonWhereUniqueInput
}

input OrganizationRelateToOneForCreateInput {
  create: OrganizationCreateInput
  connect: OrganizationWhereUniqueInput
}

type Email {
  id: ID!
  address: String
  person(where: PersonWhereInput! = {}, orderBy: [PersonOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PersonWhereUniqueInput): [Person!]
  personCount(where: PersonWhereInput! = {}): Int
  organization(where: OrganizationWhereInput! = {}, orderBy: [OrganizationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: OrganizationWhereUniqueInput): [Organization!]
  organizationCount(where: OrganizationWhereInput! = {}): Int
}

input EmailWhereUniqueInput {
  id: ID
}

input EmailWhereInput {
  AND: [EmailWhereInput!]
  OR: [EmailWhereInput!]
  NOT: [EmailWhereInput!]
  id: IDFilter
  address: StringFilter
  person: PersonManyRelationFilter
  organization: OrganizationManyRelationFilter
}

input PersonManyRelationFilter {
  every: PersonWhereInput
  some: PersonWhereInput
  none: PersonWhereInput
}

input OrganizationManyRelationFilter {
  every: OrganizationWhereInput
  some: OrganizationWhereInput
  none: OrganizationWhereInput
}

input EmailOrderByInput {
  id: OrderDirection
  address: OrderDirection
}

input EmailUpdateInput {
  address: String
  person: PersonRelateToManyForUpdateInput
  organization: OrganizationRelateToManyForUpdateInput
}

input PersonRelateToManyForUpdateInput {
  disconnect: [PersonWhereUniqueInput!]
  set: [PersonWhereUniqueInput!]
  create: [PersonCreateInput!]
  connect: [PersonWhereUniqueInput!]
}

input OrganizationRelateToManyForUpdateInput {
  disconnect: [OrganizationWhereUniqueInput!]
  set: [OrganizationWhereUniqueInput!]
  create: [OrganizationCreateInput!]
  connect: [OrganizationWhereUniqueInput!]
}

input EmailUpdateArgs {
  where: EmailWhereUniqueInput!
  data: EmailUpdateInput!
}

input EmailCreateInput {
  address: String
  person: PersonRelateToManyForCreateInput
  organization: OrganizationRelateToManyForCreateInput
}

input PersonRelateToManyForCreateInput {
  create: [PersonCreateInput!]
  connect: [PersonWhereUniqueInput!]
}

input OrganizationRelateToManyForCreateInput {
  create: [OrganizationCreateInput!]
  connect: [OrganizationWhereUniqueInput!]
}

type Phone {
  id: ID!
  number: String
  country: Country
  person(where: PersonWhereInput! = {}, orderBy: [PersonOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PersonWhereUniqueInput): [Person!]
  personCount(where: PersonWhereInput! = {}): Int
  organization(where: OrganizationWhereInput! = {}, orderBy: [OrganizationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: OrganizationWhereUniqueInput): [Organization!]
  organizationCount(where: OrganizationWhereInput! = {}): Int
}

input PhoneWhereUniqueInput {
  id: ID
}

input PhoneWhereInput {
  AND: [PhoneWhereInput!]
  OR: [PhoneWhereInput!]
  NOT: [PhoneWhereInput!]
  id: IDFilter
  number: StringFilter
  country: CountryWhereInput
  person: PersonManyRelationFilter
  organization: OrganizationManyRelationFilter
}

input PhoneOrderByInput {
  id: OrderDirection
}

input PhoneUpdateInput {
  number: String
  country: CountryRelateToOneForUpdateInput
  person: PersonRelateToManyForUpdateInput
  organization: OrganizationRelateToManyForUpdateInput
}

input PhoneUpdateArgs {
  where: PhoneWhereUniqueInput!
  data: PhoneUpdateInput!
}

input PhoneCreateInput {
  number: String
  country: CountryRelateToOneForCreateInput
  person: PersonRelateToManyForCreateInput
  organization: OrganizationRelateToManyForCreateInput
}

type Person {
  id: ID!
  firstName: String
  middleName: String
  lastName: String
  name: String
  dob: CalendarDay
  gender: String
  phones(where: PhoneWhereInput! = {}, orderBy: [PhoneOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PhoneWhereUniqueInput): [Phone!]
  phonesCount(where: PhoneWhereInput! = {}): Int
  emails(where: EmailWhereInput! = {}, orderBy: [EmailOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EmailWhereUniqueInput): [Email!]
  emailsCount(where: EmailWhereInput! = {}): Int
  addresses(where: AddressWhereInput! = {}, orderBy: [AddressOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AddressWhereUniqueInput): [Address!]
  addressesCount(where: AddressWhereInput! = {}): Int
  createdAt: DateTime
}

scalar CalendarDay @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input PersonWhereUniqueInput {
  id: ID
}

input PersonWhereInput {
  AND: [PersonWhereInput!]
  OR: [PersonWhereInput!]
  NOT: [PersonWhereInput!]
  id: IDFilter
  firstName: StringFilter
  middleName: StringFilter
  lastName: StringFilter
  dob: CalendarDayNullableFilter
  gender: StringFilter
  phones: PhoneManyRelationFilter
  emails: EmailManyRelationFilter
  addresses: AddressManyRelationFilter
  createdAt: DateTimeNullableFilter
}

input CalendarDayNullableFilter {
  equals: CalendarDay
  in: [CalendarDay!]
  notIn: [CalendarDay!]
  lt: CalendarDay
  lte: CalendarDay
  gt: CalendarDay
  gte: CalendarDay
  not: CalendarDayNullableFilter
}

input EmailManyRelationFilter {
  every: EmailWhereInput
  some: EmailWhereInput
  none: EmailWhereInput
}

input AddressManyRelationFilter {
  every: AddressWhereInput
  some: AddressWhereInput
  none: AddressWhereInput
}

input PersonOrderByInput {
  id: OrderDirection
  firstName: OrderDirection
  middleName: OrderDirection
  lastName: OrderDirection
  dob: OrderDirection
  gender: OrderDirection
  createdAt: OrderDirection
}

input PersonUpdateInput {
  firstName: String
  middleName: String
  lastName: String
  dob: CalendarDay
  gender: String
  phones: PhoneRelateToManyForUpdateInput
  emails: EmailRelateToManyForUpdateInput
  addresses: AddressRelateToManyForUpdateInput
  createdAt: DateTime
}

input EmailRelateToManyForUpdateInput {
  disconnect: [EmailWhereUniqueInput!]
  set: [EmailWhereUniqueInput!]
  create: [EmailCreateInput!]
  connect: [EmailWhereUniqueInput!]
}

input AddressRelateToManyForUpdateInput {
  disconnect: [AddressWhereUniqueInput!]
  set: [AddressWhereUniqueInput!]
  create: [AddressCreateInput!]
  connect: [AddressWhereUniqueInput!]
}

input PersonUpdateArgs {
  where: PersonWhereUniqueInput!
  data: PersonUpdateInput!
}

input PersonCreateInput {
  firstName: String
  middleName: String
  lastName: String
  dob: CalendarDay
  gender: String
  phones: PhoneRelateToManyForCreateInput
  emails: EmailRelateToManyForCreateInput
  addresses: AddressRelateToManyForCreateInput
  createdAt: DateTime
}

input EmailRelateToManyForCreateInput {
  create: [EmailCreateInput!]
  connect: [EmailWhereUniqueInput!]
}

input AddressRelateToManyForCreateInput {
  create: [AddressCreateInput!]
  connect: [AddressWhereUniqueInput!]
}

type Organization {
  id: ID!
  name: String
  phones(where: PhoneWhereInput! = {}, orderBy: [PhoneOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PhoneWhereUniqueInput): [Phone!]
  phonesCount(where: PhoneWhereInput! = {}): Int
  emails(where: EmailWhereInput! = {}, orderBy: [EmailOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EmailWhereUniqueInput): [Email!]
  emailsCount(where: EmailWhereInput! = {}): Int
  addresses(where: AddressWhereInput! = {}, orderBy: [AddressOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AddressWhereUniqueInput): [Address!]
  addressesCount(where: AddressWhereInput! = {}): Int
  createdAt: DateTime
}

input OrganizationWhereUniqueInput {
  id: ID
}

input OrganizationWhereInput {
  AND: [OrganizationWhereInput!]
  OR: [OrganizationWhereInput!]
  NOT: [OrganizationWhereInput!]
  id: IDFilter
  name: StringFilter
  phones: PhoneManyRelationFilter
  emails: EmailManyRelationFilter
  addresses: AddressManyRelationFilter
  createdAt: DateTimeNullableFilter
}

input OrganizationOrderByInput {
  id: OrderDirection
  name: OrderDirection
  createdAt: OrderDirection
}

input OrganizationUpdateInput {
  name: String
  phones: PhoneRelateToManyForUpdateInput
  emails: EmailRelateToManyForUpdateInput
  addresses: AddressRelateToManyForUpdateInput
  createdAt: DateTime
}

input OrganizationUpdateArgs {
  where: OrganizationWhereUniqueInput!
  data: OrganizationUpdateInput!
}

input OrganizationCreateInput {
  name: String
  phones: PhoneRelateToManyForCreateInput
  emails: EmailRelateToManyForCreateInput
  addresses: AddressRelateToManyForCreateInput
  createdAt: DateTime
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createCountry(data: CountryCreateInput!): Country
  createCountries(data: [CountryCreateInput!]!): [Country]
  updateCountry(where: CountryWhereUniqueInput!, data: CountryUpdateInput!): Country
  updateCountries(data: [CountryUpdateArgs!]!): [Country]
  deleteCountry(where: CountryWhereUniqueInput!): Country
  deleteCountries(where: [CountryWhereUniqueInput!]!): [Country]
  createState(data: StateCreateInput!): State
  createStates(data: [StateCreateInput!]!): [State]
  updateState(where: StateWhereUniqueInput!, data: StateUpdateInput!): State
  updateStates(data: [StateUpdateArgs!]!): [State]
  deleteState(where: StateWhereUniqueInput!): State
  deleteStates(where: [StateWhereUniqueInput!]!): [State]
  createCity(data: CityCreateInput!): City
  createCities(data: [CityCreateInput!]!): [City]
  updateCity(where: CityWhereUniqueInput!, data: CityUpdateInput!): City
  updateCities(data: [CityUpdateArgs!]!): [City]
  deleteCity(where: CityWhereUniqueInput!): City
  deleteCities(where: [CityWhereUniqueInput!]!): [City]
  createPostalCode(data: PostalCodeCreateInput!): PostalCode
  createPostalCodes(data: [PostalCodeCreateInput!]!): [PostalCode]
  updatePostalCode(where: PostalCodeWhereUniqueInput!, data: PostalCodeUpdateInput!): PostalCode
  updatePostalCodes(data: [PostalCodeUpdateArgs!]!): [PostalCode]
  deletePostalCode(where: PostalCodeWhereUniqueInput!): PostalCode
  deletePostalCodes(where: [PostalCodeWhereUniqueInput!]!): [PostalCode]
  createAddress(data: AddressCreateInput!): Address
  createAddresses(data: [AddressCreateInput!]!): [Address]
  updateAddress(where: AddressWhereUniqueInput!, data: AddressUpdateInput!): Address
  updateAddresses(data: [AddressUpdateArgs!]!): [Address]
  deleteAddress(where: AddressWhereUniqueInput!): Address
  deleteAddresses(where: [AddressWhereUniqueInput!]!): [Address]
  createEmail(data: EmailCreateInput!): Email
  createEmails(data: [EmailCreateInput!]!): [Email]
  updateEmail(where: EmailWhereUniqueInput!, data: EmailUpdateInput!): Email
  updateEmails(data: [EmailUpdateArgs!]!): [Email]
  deleteEmail(where: EmailWhereUniqueInput!): Email
  deleteEmails(where: [EmailWhereUniqueInput!]!): [Email]
  createPhone(data: PhoneCreateInput!): Phone
  createPhones(data: [PhoneCreateInput!]!): [Phone]
  updatePhone(where: PhoneWhereUniqueInput!, data: PhoneUpdateInput!): Phone
  updatePhones(data: [PhoneUpdateArgs!]!): [Phone]
  deletePhone(where: PhoneWhereUniqueInput!): Phone
  deletePhones(where: [PhoneWhereUniqueInput!]!): [Phone]
  createPerson(data: PersonCreateInput!): Person
  createPeople(data: [PersonCreateInput!]!): [Person]
  updatePerson(where: PersonWhereUniqueInput!, data: PersonUpdateInput!): Person
  updatePeople(data: [PersonUpdateArgs!]!): [Person]
  deletePerson(where: PersonWhereUniqueInput!): Person
  deletePeople(where: [PersonWhereUniqueInput!]!): [Person]
  createOrganization(data: OrganizationCreateInput!): Organization
  createOrganizations(data: [OrganizationCreateInput!]!): [Organization]
  updateOrganization(where: OrganizationWhereUniqueInput!, data: OrganizationUpdateInput!): Organization
  updateOrganizations(data: [OrganizationUpdateArgs!]!): [Organization]
  deleteOrganization(where: OrganizationWhereUniqueInput!): Organization
  deleteOrganizations(where: [OrganizationWhereUniqueInput!]!): [Organization]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  firstName: String
  lastName: String
  email: String
  password: String
  isAdmin: Boolean
}

type Query {
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  usersCount(where: UserWhereInput! = {}): Int
  country(where: CountryWhereUniqueInput!): Country
  countries(where: CountryWhereInput! = {}, orderBy: [CountryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CountryWhereUniqueInput): [Country!]
  countriesCount(where: CountryWhereInput! = {}): Int
  state(where: StateWhereUniqueInput!): State
  states(where: StateWhereInput! = {}, orderBy: [StateOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: StateWhereUniqueInput): [State!]
  statesCount(where: StateWhereInput! = {}): Int
  city(where: CityWhereUniqueInput!): City
  cities(where: CityWhereInput! = {}, orderBy: [CityOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CityWhereUniqueInput): [City!]
  citiesCount(where: CityWhereInput! = {}): Int
  postalCode(where: PostalCodeWhereUniqueInput!): PostalCode
  postalCodes(where: PostalCodeWhereInput! = {}, orderBy: [PostalCodeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostalCodeWhereUniqueInput): [PostalCode!]
  postalCodesCount(where: PostalCodeWhereInput! = {}): Int
  address(where: AddressWhereUniqueInput!): Address
  addresses(where: AddressWhereInput! = {}, orderBy: [AddressOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AddressWhereUniqueInput): [Address!]
  addressesCount(where: AddressWhereInput! = {}): Int
  email(where: EmailWhereUniqueInput!): Email
  emails(where: EmailWhereInput! = {}, orderBy: [EmailOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EmailWhereUniqueInput): [Email!]
  emailsCount(where: EmailWhereInput! = {}): Int
  phone(where: PhoneWhereUniqueInput!): Phone
  phones(where: PhoneWhereInput! = {}, orderBy: [PhoneOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PhoneWhereUniqueInput): [Phone!]
  phonesCount(where: PhoneWhereInput! = {}): Int
  person(where: PersonWhereUniqueInput!): Person
  people(where: PersonWhereInput! = {}, orderBy: [PersonOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PersonWhereUniqueInput): [Person!]
  peopleCount(where: PersonWhereInput! = {}): Int
  organization(where: OrganizationWhereUniqueInput!): Organization
  organizations(where: OrganizationWhereInput! = {}, orderBy: [OrganizationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: OrganizationWhereUniqueInput): [Organization!]
  organizationsCount(where: OrganizationWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  graphql: KeystoneAdminUIGraphQL!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUIGraphQL {
  names: KeystoneAdminUIGraphQLNames!
}

type KeystoneAdminUIGraphQLNames {
  outputTypeName: String!
  whereInputName: String!
  whereUniqueInputName: String!
  createInputName: String!
  createMutationName: String!
  createManyMutationName: String!
  relateToOneForCreateInputName: String!
  relateToManyForCreateInputName: String!
  itemQueryName: String!
  listOrderName: String!
  listQueryCountName: String!
  listQueryName: String!
  updateInputName: String!
  updateMutationName: String!
  updateManyInputName: String!
  updateManyMutationName: String!
  relateToOneForUpdateInputName: String!
  relateToManyForUpdateInputName: String!
  deleteMutationName: String!
  deleteManyMutationName: String!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
